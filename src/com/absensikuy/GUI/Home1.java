/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.absensikuy.GUI;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class Home1 extends javax.swing.JFrame {

    /**
     * Creates new form Home1
     */
    public Home1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        quit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabel = new javax.swing.JTable();
        refresh = new javax.swing.JButton();
        list = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        input = new javax.swing.JButton();
        Id = new javax.swing.JTextField();
        box = new javax.swing.JComboBox<>();
        kal = new com.toedter.calendar.JCalendar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Absensikuy");

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        tabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabel);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        list.setText("list");
        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listActionPerformed(evt);
            }
        });

        jLabel2.setText("Manual ");

        input.setText("input");
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdActionPerformed(evt);
            }
        });

        box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hadir", "Izin", "Sakit", "Alpha" }));
        box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kal, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refresh)
                                .addGap(12, 12, 12)
                                .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(quit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(input)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(quit)
                    .addComponent(refresh)
                    .addComponent(list))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(input)
                    .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
     new Login1 ().setVisible(true);
     this.dispose();
    }//GEN-LAST:event_quitActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        try {
        tabel.setModel(new DefaultTableModel());
        DefaultTableModel model =(DefaultTableModel)tabel.getModel();
        Connection conn = (Connection) Koneksi.KoneksiDB();
        Statement st = conn.createStatement();
        String query="SELECT * FROM student"
                + "SELECT keterangan FROM absen ";
        ResultSet rs =st.executeQuery(query);
        ResultSetMetaData rsmd=(ResultSetMetaData) rs.getMetaData();
        
        int cols =rsmd.getColumnCount();
        String[] colName=new String[cols];
        for(int i=0;i<cols;i++)
            colName[i]=rsmd.getColumnName(i+1);
        model.setColumnIdentifiers(colName);
        String Id,Nama,Kelas;
        while (rs.next()){
            Id=rs.getString(1);
            Nama=rs.getString(2);
            Kelas=rs.getString(3);
            String[] row={Id,Nama,Kelas};
            model.addRow(row);
        }
        st.close();
        conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_refreshActionPerformed

    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
        new List().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_listActionPerformed

    private void IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IdActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
    String _ID = Id.getText();
    GregorianCalendar kal = new GregorianCalendar();
    int year = kal.get(GregorianCalendar.YEAR);
    int month = kal.get(GregorianCalendar.MONTH) + 1;
    int dayOfMonth = kal.get(GregorianCalendar.DAY_OF_MONTH);

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String _Date = String.format("%04d-%02d-%02d", year, month, dayOfMonth);

    String _Ket = box.getSelectedItem().toString();

    if (_ID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "ID kosong");
    } else {
        try {
            Connection conn = (Connection) Koneksi.KoneksiDB();
            Statement st = conn.createStatement();
            String sql = "SELECT student_id FROM student WHERE student_id='" + _ID + "'";
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                rs.close();
                st.close();

                Connection connn = Koneksi.KoneksiDB();
                Statement stt = connn.createStatement();

                // Insert query
                String insertQuery = "INSERT INTO absen (`student_id`, `date`, `keterangan`) VALUES ('" + _ID + "','" + _Date + "','" + _Ket + "')";
                stt.executeUpdate(insertQuery);

                stt.close();
                connn.close();

                // Retrieve and display data
                try {
                    Connection connForSelect = Koneksi.KoneksiDB();
                    Statement stForSelect = connForSelect.createStatement();

                    String selectQuery = "SELECT student.student_id AS Id, student.student_name AS Nama, student.student_class AS Kelas, absen.date AS Tanggal, absen.keterangan FROM student INNER JOIN absen ON student.student_id = absen.student_id WHERE student.student_id = '" + _ID + "' ORDER BY absen.date DESC LIMIT 1";
                    ResultSet rss = stForSelect.executeQuery(selectQuery);
                    ResultSetMetaData rsmd = (ResultSetMetaData) rss.getMetaData();

                    DefaultTableModel model = (DefaultTableModel) tabel.getModel();

                    int cols = rsmd.getColumnCount();
                    String[] colName = new String[cols];

                    for (int i = 0; i < cols; i++)
                        colName[i] = rsmd.getColumnName(i + 1);

                    model.setColumnIdentifiers(colName);

                    String Id, Nama, Kelas, Tanggal, Keterangan;

                    while (rss.next()) {
                        Id = rss.getString("Id");
                        Nama = rss.getString("Nama");
                        Kelas = rss.getString("Kelas");
                        Tanggal = rss.getString("Tanggal");
                        Keterangan = rss.getString("Keterangan");
                        String[] row = {Id, Nama, Kelas, Tanggal, Keterangan};
                        model.addRow(row);
                    }

                    rss.close();
                    stForSelect.close();
                    connForSelect.close();

                    // Set the model to your table after fetching data
                    tabel.setModel(model);

                } catch (SQLException e) {
                    e.printStackTrace();
                    // Handle SQL exception for select query
                }

            } else {
                JOptionPane.showMessageDialog(null, "Username dan password yang anda masukkan salah!", "Error", JOptionPane.ERROR_MESSAGE);
            }

            rs.close();
            st.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_inputActionPerformed

    private void boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Id;
    private javax.swing.JComboBox<String> box;
    private javax.swing.JButton input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JCalendar kal;
    private javax.swing.JButton list;
    private javax.swing.JButton quit;
    private javax.swing.JButton refresh;
    private javax.swing.JTable tabel;
    // End of variables declaration//GEN-END:variables
}
